syntax = "proto3";

package PGo;

import public "holoholo_shared.proto";

// The get map objects request object
message GetMapObjectsProto {
	int32 CellId = 1;
	int32 SinceTimeMs = 2;
	double PlayerLat = 3;
	double PlayerLng = 4;
}

// The get map objects response object
message GetMapObjectsOutProto {
	repeated ClientMapCellProto cells = 1;
	int32 Status = 2;
}

// A cell is a geographical "zone" containing objects like pokemon, gyms, and pokestops
message ClientMapCellProto {
	
	// S2 geographic area that the cell covers (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
	uint64 S2CellId = 1;

	// current timestamp
	int32 AsOfTimeMs = 2;

	repeated PokemonFortProto Fort = 3;
	repeated ClientSpawnPointProto SpawnPoint = 4;
	bool DeletedObject = 6;
	bool IsTruncatedList = 7;
	repeated PokemonSummaryFortProto FortSummary = 8;
	repeated ClientSpawnPointProto DecimatedSpawnPoint = 9;

	// Pokemon farther away than 2 "steps", but still in the area (3 "steps" away)
	repeated NearbyPokemonProto NearbyPokemon = 11;

	// Each pokemon within 2 "steps" or closer will have a WildPokemonProto and MapPokemonProto object
	repeated WildPokemonProto WildPokemon = 5;
	repeated MapPokemonProto CatchablePokemon = 10;
}

// A "fort" is the internal name for a gym or pokestop point of interest
message PokemonFortProto {
	string FortId = 1;
	int32 LastModifiedMs = 2;
	double Latitude = 3;
	double Longitude = 4;
	bool Enabled = 8;

	// Fields related to gyms only

		// Team that owns the gym
		TeamColor Team = 5; 

		// Highest CP Pokemon at the gym
		PokemonName GuardPokemonId = 6;
		int32 GuardPokemonLevel = 7;

		// Prestigate / experience of the gym
		int32 GymPoints = 10;
		
		// Whether someone is battling at the gym currently
		bool IsInBattle = 11;

	// Fields related to pokestops only
		
		// If true, this is a pokestop
		bool FortType = 9;

		// Timestamp when the pokestop can be activated again to get items / xp
		int32 CooldownCompleteMs = 14;

		// Not sure what these are, but "Sponsor" sure is interesting...
		// Decompilation did not make it clear if these should go under FortLureInfoProto or PokemonFortProto directly 
		int32 Sponsor = 15;
		int32 RenderingType = 16;

		// Might represent the type of item applied to the pokestop, right only lures can be applied
		bytes ActiveFortModifier = 12;

		// Decompilation did not produce this nested proto correctly, so manually created FortLureInfoProto based on wire sniffing and used/added it here
		message FortLureInfoProto {
		  string FortId = 1;
		  double NotSure2 = 2;
		  PokemonName ActivePokemon = 3;
		  int32 LureExpiryMs = 4;
		}
		FortLureInfoProto FortLureInfo = 13;
}

message PokemonSummaryFortProto {
	int32 FortSummaryId = 1;
	int32 LastModifiedMs = 2;
	double Latitude = 3;
	double Longitude = 4;
}

message NearbyPokemonProto {
	PokemonName PokedexNumber = 1;
	float DistanceMeters = 2;
	double EncounterId = 3;
}

message WildPokemonProto {
	double EncounterId = 1;
	int32 LastModifiedMs = 2;
	double Latitude = 3;
	double Longitude = 4;

	// S2 geographic area of the spawn point (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
	string SpawnPointId = 5;

	// Decompilation did not produce this nested proto correctly, so manually created PokemonInfoProto based on wire sniffing and used/added it here
	message PokemonInfoProto {
    	PokemonName Pokemon = 2;
  }
	PokemonInfoProto PokemonInfo = 7;

	// The amount of time before the pokemon will be gone
	int32 TimeTillHiddenMs = 11;
}

message ClientSpawnPointProto {
  double Latitude = 2;
  double Longitude = 3;
}

message MapPokemonProto {
	
	// S2 geographic area of the spawn point (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
	string SpawnpointId = 1;

	double EncounterId = 2;
	PokemonName PokedexTypeId = 3;

	// After this timestamp, the pokemon will be gone
	int32 ExpirationTimeMs = 4;

	double Latitude = 5;
	double Longitude = 6;
}

